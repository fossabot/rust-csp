statement ::= declaration | if_statement
statement_block ::= '{' (statement)* '}'

binary_op ::= '||' | '^^' | '&&' | '|' | '^' | '&'
unary_op ::= '!' | '~'

expr
    ::= expr binary_op expr |
        unary_op primary_expr |
        id

primary_expr
    ::= '(' expr ')' |
        id

if_statement ::= 'if' expr statement_block (else_if_block)* (else_block)?
else_if_block ::= 'elseif' expr statement_block
else_block ::= 'else' statement_block

declaration 
    ::= symbol_declaration |
        block_declaration |
        optional_declaration |
        macro_declaration

macro_type_specifier ::= 'macro'
macro_param_seq ::= empty | macro_params
macro_params ::= macro_param | macro_param ',' macro_params 
macro_param ::= symbol_type_specifier id 

/*
    Declaration of a named macro with 0 or more parameters and a block of statements.

    Example:
        macro my_macro(type my_type) {
            type t;
        }

*/
macro_declaration ::= macro_type_specifier id '(' macro_param_seq ')' statement_block

/*
    A type specifier that maps back into a single symbol in the CIL source.
*/
symbol_type_specifier 
    ::= 'type_attribute' | 
        'type' |
        'role_attribute' |
        'role' | 
        'user_attribute' |
        'user' |
        'sensitivity' |
        'category' |
        'level' |
        'level_range' |
        'category' |
        'context'

/* 
    Declaration of an entry in the symbol table, with initializer expression [optional depending on the symbol type].

    Examples:
        type_attribute my_type_attr;
        type_attribute my_type_attr_2 ::= a & b;
        context ctx ::= user:role:type:levelrange;
*/
symbol_declaration ::= symbol_type_specifier id ';'

/* 
    Valid type specifiers for block declarations.
*/
block_type_specifier ::= 'block' | 'optional'

/* 
    Declaration of a named block of statements.
*/
block_declaration ::= ('abstract')? 'block' statement_block

/*
    Declaration of an optional block of statements.
*/
optional_declaration ::= 'optional' statement_block